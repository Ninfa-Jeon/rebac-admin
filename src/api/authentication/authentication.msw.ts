/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
  BadRequestResponse,
  DefaultResponse,
  GetAvailableIdentityProvidersResponse,
  GetIdentityProvidersResponse,
  IdentityProvider,
  NotFoundResponse,
  UnauthorizedResponse,
} from "../api.schemas";

export const getGetAvailableIdentityProvidersResponseMock = (
  overrideResponse: any = {},
): GetAvailableIdentityProvidersResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.word.sample(),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersResponseMock200 = (
  overrideResponse: any = {},
): GetAvailableIdentityProvidersResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.word.sample(),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMock = (
  overrideResponse: any = {},
): GetIdentityProvidersResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    acceptsPromptNone: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    accountLinkingOnly: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    disableIdentityInfo: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    identityCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    storeTokens: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    storeTokensReadable: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    syncMode: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["import"] as const),
      undefined,
    ]),
    trustEmail: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMock200 = (
  overrideResponse: any = {},
): GetIdentityProvidersResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    acceptsPromptNone: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    accountLinkingOnly: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    disableIdentityInfo: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    identityCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    storeTokens: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    storeTokensReadable: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    syncMode: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["import"] as const),
      undefined,
    ]),
    trustEmail: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMock = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMock200 = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMock = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMock200 = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMock = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMock200 = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteIdentityProvidersItemResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteIdentityProvidersItemResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteIdentityProvidersItemResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteIdentityProvidersItemResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersMockHandler = (
  overrideResponse?: GetAvailableIdentityProvidersResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAvailableIdentityProvidersMockHandler200 = (
  overrideResponse?: GetAvailableIdentityProvidersResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAvailableIdentityProvidersMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAvailableIdentityProvidersMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAvailableIdentityProvidersMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAvailableIdentityProvidersMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandler = (
  overrideResponse?: GetIdentityProvidersResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandler200 = (
  overrideResponse?: GetIdentityProvidersResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandler = (
  overrideResponse?: IdentityProvider,
) => {
  return http.post("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPostIdentityProvidersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandler200 = (
  overrideResponse?: IdentityProvider,
) => {
  return http.post("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPostIdentityProvidersResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.post("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPostIdentityProvidersResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.post("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPostIdentityProvidersResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.post("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPostIdentityProvidersResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.post("*/authentication", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPostIdentityProvidersResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandler = (
  overrideResponse?: IdentityProvider,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandler200 = (
  overrideResponse?: IdentityProvider,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandler = (
  overrideResponse?: IdentityProvider,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandler200 = (
  overrideResponse?: IdentityProvider,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteIdentityProvidersItemMockHandler = () => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getDeleteIdentityProvidersItemMockHandler200 = () => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getDeleteIdentityProvidersItemMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getDeleteIdentityProvidersItemResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteIdentityProvidersItemMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getDeleteIdentityProvidersItemResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteIdentityProvidersItemMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getDeleteIdentityProvidersItemResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteIdentityProvidersItemMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getDeleteIdentityProvidersItemResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getAuthenticationMock = () => [
  getGetAvailableIdentityProvidersMockHandler(),
  getGetIdentityProvidersMockHandler(),
  getPostIdentityProvidersMockHandler(),
  getGetIdentityProvidersItemMockHandler(),
  getPutIdentityProvidersItemMockHandler(),
  getDeleteIdentityProvidersItemMockHandler(),
];
